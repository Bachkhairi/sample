name: Strict Versioning with Patch Control

on:
  push:
    branches: [main]

jobs:
  versioning:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Git
        run: |
          git config user.name "Bachhamba Khaireddine"
          git config user.email "khaireddine.bachhamba@ept.ucar.tn"

      - name: Detect version bump type
        id: bump-detector
        run: |
          # Get latest tag
          git fetch --tags
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.1.0")
          echo "Current version: $LATEST_TAG"

          # Get commits since last tag
          if [ "$LATEST_TAG" != "v0.1.0" ]; then
            COMMITS=$(git log $LATEST_TAG..HEAD --pretty=format:"%s")
          else
            COMMITS=$(git log --pretty=format:"%s")
          fi

          # Initialize bump type
          BUMP_TYPE="PATCH"  # Default to PATCH only if conditions met

          # MAJOR bump conditions (breaking changes)
          if echo "$COMMITS" | grep -qE '^(break|major|feat)(\(.*\))?!:'; then
            BUMP_TYPE="MAJOR"

          # MINOR bump conditions (features)
          elif echo "$COMMITS" | grep -qE '^(feat|feature)(\(.*\))?:'; then
            BUMP_TYPE="MINOR"

          # STRICT PATCH conditions (only bump if these match)
          elif echo "$COMMITS" | grep -qE '^(fix|patch|docs|chore)(\(.*\))?:'; then
            BUMP_TYPE="PATCH"
          else
            # No matching commit patterns - DON'T bump version
            echo "No version-bumping commits detected"
            echo "SKIP_VERSIONING=true" >> $GITHUB_ENV
            exit 0
          fi

          echo "Detected change type: $BUMP_TYPE"
          echo "BUMP_TYPE=$BUMP_TYPE" >> $GITHUB_ENV

      - name: Calculate new version
        if: env.SKIP_VERSIONING != 'true'
        id: version-calculator
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.1.0")
          TAG_NUM=${LATEST_TAG#v}
          IFS='.' read -r MAJOR MINOR PATCH <<< "$TAG_NUM"

          case "$BUMP_TYPE" in
            "MAJOR") NEW_TAG="v$((MAJOR + 1)).0.0" ;;
            "MINOR") NEW_TAG="v$MAJOR.$((MINOR + 1)).0" ;;
            "PATCH") NEW_TAG="v$MAJOR.$MINOR.$((PATCH + 1))" ;;
          esac

          echo "New version: $NEW_TAG"
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV

      - name: Create and push tag
        if: env.SKIP_VERSIONING != 'true'
        run: |
          git tag $NEW_TAG
          git push origin $NEW_TAG
        env:
          NEW_TAG: ${{ env.NEW_TAG }}

      - name: Generate Release Notes
        if: env.SKIP_VERSIONING != 'true'
        run: |
          # Generate release notes from commits
          COMMITS_SINCE_TAG=$(git log $LATEST_TAG..HEAD --pretty=format:"%h %s")
          RELEASE_NOTES="## $NEW_TAG Release Notes\n\n### Changes:\n$COMMITS_SINCE_TAG"
          
          # Create the release notes markdown file
          echo "$RELEASE_NOTES" > release_notes.md

          # Optional: Upload release notes as an artifact
          # Uncomment below if you want to store them as an artifact for later reference
          # - name: Upload release notes artifact
          #   uses: actions/upload-artifact@v2
          #   with:
          #     name: release-notes
          #     path: release_notes.md

      - name: Upload Release Notes as GitHub Release (Optional)
        if: env.SKIP_VERSIONING != 'true'
        run: |
          gh release create $NEW_TAG release_notes.md --title "Release $NEW_TAG" --notes-file release_notes.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
